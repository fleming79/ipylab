[build-system]
requires = [
  "nodejs-wheel",
  "hatchling>=1.5.0",
  "jupyterlab>=4.1.0,<5",
  "hatch-nodejs-version>=0.3.2",
]
build-backend = "hatchling.build"

[project]
name = "ipylab"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.11"
classifiers = [
  "Framework :: Jupyter",
  "Framework :: Jupyter :: JupyterLab",
  "Framework :: Jupyter :: JupyterLab :: 4",
  "Framework :: Jupyter :: JupyterLab :: Extensions",
  "Framework :: Jupyter :: JupyterLab :: Extensions :: Prebuilt",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

dependencies = [
  "async-kernel>=0.5,<0.6",
  "jupyterlab>=4.3",
  "ipywidgets>=8.1.5",
  "ipython>=8.32",
  "jupyterlab_widgets>=3.0.11",
  "pluggy~=1.5",
  "typing_extensions",
  "traitlets @ {root:uri}/pkg/traitlets-5.14.3-py3-none-any.whl",
  "jupyter_client @ {root:uri}/pkg/jupyter_client-8.6.3-py3-none-any.whl",
  "widgetsnbextension @ {root:uri}/pkg/widgetsnbextension-4.0.13-py3-none-any.whl",
  "jupyterlab_widgets @ {root:uri}/pkg/jupyterlab_widgets-3.0.13-py3-none-any.whl",
  "ipywidgets @ {root:uri}/pkg/ipywidgets-8.1.5-py3-none-any.whl",
]
dynamic = ["version", "description", "authors", "urls", "keywords"]


[dependency-groups]
docs = [
  "mkdocs-material",
  "mike",
  "mkdocstrings[python]",
  "mkdocs-jupyter",
  "mkdocs-open-in-new-tab",
  "mkdocs-git-revision-date-localized-plugin",
]
test = [
  "pytest",
  "pre-commit",
  "pytest-cov",
  "pytest-timeout",
  "pytest-mock",
  "pytest-retry",
  "pytest>=8.4,<9",
  "trio",
  "numpy",
  "matplotlib",
  "ipympl",
  "bqplot",
]
dev = [
  "nodejs-wheel",
  "basedpyright",
  "ruff",
  "debugpy",
  { include-group = "test" },
]
cov = ["coverage[toml]", "pytest-cov", "matplotlib", "trio"]

[project.scripts]
ipylab = "ipylab:plugin_manager.hook.launch_ipylab"


[tool.hatch.version]
source = "nodejs"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.metadata.hooks.nodejs]
fields = ["description", "authors", "urls"]

[tool.hatch.build.targets.sdist]
artifacts = ["ipylab/labextension"]
exclude = [".github", "binder"]

[tool.hatch.build.targets.wheel.shared-data]
"ipylab/labextension" = "share/jupyter/labextensions/ipylab"

[tool.hatch.build.targets.wheel.force-include]
"ipylab/labextension/package.json" = "ipylab/labextension/package.json"


[tool.hatch.build.hooks.jupyter-builder]
dependencies = ["hatch-jupyter-builder>=0.5"]
build-function = "hatch_jupyter_builder.npm_builder"
ensured-targets = [
  "ipylab/labextension/static/style.js",
  "ipylab/labextension/package.json",
]
skip-if-exists = ["ipylab/labextension/static/style.js"]

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
build_cmd = "build:prod"
npm = ["jlpm"]

[tool.hatch.build.hooks.jupyter-builder.editable-build-kwargs]
build_cmd = "install:extension"
npm = ["jlpm"]
source_dir = "src"
build_dir = "ipylab/labextension"

[tool.jupyter-releaser.options]
version_cmd = "hatch version"

[tool.jupyter-releaser.hooks]
before-build-npm = ["pip install jupyterlab~=4.1", "jlpm", "jlpm build:prod"]
before-build-python = ["jlpm clean:all"]

[tool.check-wheel-contents]
ignore = ["W002"]

[tool.ruff]
target-version = "py311"
line-length = 120
src = ['docs']

[tool.codespell]
skip = 'yarn.lock,node_modules*,lib,.yarn*,./ipylab*'
ignore-words-list = 'statics'
write = true

[tool.ruff.lint]
extend-select = [
  "B",    # flake8-bugbear
  "I",    # isort
  "F",    # Pyflakes
  "ARG",  # flake8-unused-arguments
  "C4",   # flake8-comprehensions
  "EM",   # flake8-errmsg
  "ICN",  # flake8-import-conventions
  "G",    # flake8-logging-format
  "PERF", # Perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PLR",  # Refactor
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  "T20",  # flake8-print
  "TRY",  # tryceratops
  "FURB", # Refurb
  "UP",   # pyupgrade
  "YTT",  # flake8-2020
  "EXE",  # flake8-executable
  "NPY",  # NumPy specific rules
  "PD",   # pandas-vet
  "PYI",  # flake8-pyi
  "TC",   # flake8-type-checking
]
ignore = [
  "PLR",    # Design related pylint codes
  "B027",   # Allow non-abstract empty methods in abstract base classes
  "T201",   # `print` found
  "SIM105", # Use `contextlib.suppress(ValueError)` instead of try-except-pass
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "ARG001", # Unused function argument
  "ARG002", # Unused method argument
  "PTH123", # `open()` should be replaced by `Path.open()`
  "UP031",  # Use format specifiers instead of percent format
  "PT023",  # Use `@pytest.mark.skip` over `@pytest.mark.skip()`
  "NPY002", # numpy-legacy-random
  "RUF200", # hatch context formatting for local dist files such as "traitlets @ {root:uri}..." ref: https://github.com/astral-sh/ruff/issues/7844
]
[tool.ruff.format]
docstring-code-format = true


[tool.ruff.lint.per-file-ignores]
"tests*" = ['ARG002', 'SLF001', 'S101', 'PLR2004']
"*.ipynb" = ["PLC0415"]


[tool.pyright]
include = ["ipylab", 'examples', 'tests']
typeCheckingMode = 'standard'
